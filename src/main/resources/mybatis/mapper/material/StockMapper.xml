<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	 
<mapper namespace="com.busience.material.dao.StockDao">
	<select id="stockSelectDao" resultType="com.busience.material.dto.StockDto">
		SELECT 
			A.S_itemCode, B.Product_Item_Name S_itemName,
		    B.Product_Info_STND_1 S_Item_Standard_1, B.Product_Info_STND_2 s_Item_Standard_2,
		    C.Child_TBL_Type S_item_Classfy_1_Name, D.Child_TBL_Type S_item_Classfy_2_Name,
		    E.Child_TBL_Type S_item_Unit_Name, F.Child_TBL_Type S_item_Material_Name,
		    A.S_Qty, A.S_Warehouse, G.Child_TBL_Type S_Warehouse_Name, A.S_Qty S_ChangeQty
		FROM Stock_tbl A
		inner join Product_Info_tbl B on A.S_itemCode = B.Product_Item_Code
		inner join DTL_TBL C on B.Product_Item_CLSFC_1 = C.Child_TBL_No
		inner join DTL_TBL D on B.Product_Item_CLSFC_2 = D.Child_TBL_No
		inner join DTL_TBL E on B.Product_Unit = E.Child_TBL_No
		inner join DTL_TBL F on B.Product_Material = F.Child_TBL_No
		inner join DTL_TBL G on A.S_Warehouse = G.Child_TBL_No
		where A.S_WareHouse = #{warehouse}
		<if test="itemCode != null">
			and A.S_itemCode like concat('%', #{itemCode}, '%')
		</if>
		<if test="Check == true">
			and A.S_Qty > 0
		</if>
	</select>
	
	<select id="stockLotSelectDao" resultType="com.busience.material.dto.StockDto">
		SELECT 
			lmt.LM_LotNo S_LotNo, A.S_itemCode, B.Product_Item_Name S_itemName,
		    B.Product_Info_STND_1 S_Item_Standard_1, B.Product_Info_STND_2 s_Item_Standard_2,
		    C.Child_TBL_Type S_item_Classfy_1_Name, D.Child_TBL_Type S_item_Classfy_2_Name,
		    E.Child_TBL_Type S_item_Unit,
		    A.S_Qty, A.S_WareHouse
		FROM Stock_tbl A
		INNER JOIN LotMaster_tbl lmt ON A.S_ItemCode = lmt.LM_ItemCode
		inner join Product_Info_tbl B on A.S_itemCode = B.Product_Item_Code
		inner join DTL_TBL C on B.Product_Item_CLSFC_1 = C.Child_TBL_No
		inner join DTL_TBL D on B.Product_Item_CLSFC_2 = D.Child_TBL_No
		inner join DTL_TBL E on B.Product_Unit = E.Child_TBL_No
		where A.S_itemCode like concat('%',#{itemCode}, '%')
		and A.S_WareHouse = (SELECT Child_TBL_No FROM DTL_TBL where New_TBL_Code = 10 and Child_TBL_Num = 1)
		<if test="LotNo != ''">
		and lmt.LM_LotNo like concat('%',#{LotNo},'%')
		</if>
		<if test="Check == true">
		and A.S_Qty > 0;
		</if>
	</select>
	
	<select id="salesStockSelectDao" resultType="com.busience.material.dto.StockDto">
		SELECT 
			A.S_itemCode, B.Product_Item_Name S_itemName,
		    B.Product_Info_STND_1 S_Item_Standard_1, B.Product_Info_STND_2 s_Item_Standard_2,
		    C.Child_TBL_Type S_item_Classfy_1_Name, D.Child_TBL_Type S_item_Classfy_2_Name,
		    E.Child_TBL_Type S_item_Unit, dt.Child_TBL_Type S_Item_Material,
		    sum(A.S_Qty) S_Qty, A.S_WareHouse
		FROM Stock_tbl A
		inner join Product_Info_tbl B on A.S_itemCode = B.Product_Item_Code
		inner join DTL_TBL C on B.Product_Item_CLSFC_1 = C.Child_TBL_No
		inner join DTL_TBL D on B.Product_Item_CLSFC_2 = D.Child_TBL_No
		inner join DTL_TBL E on B.Product_Unit = E.Child_TBL_No
		inner join DTL_TBL dt ON B.Product_Material = dt.Child_TBL_No
		where A.S_itemCode like concat('%', #{ItemCode}, '%')
		and A.S_WareHouse = (SELECT Child_TBL_No FROM DTL_TBL where New_TBL_Code = 10 and Child_TBL_Num = 3)
		<if test="Check == true">
			and A.S_Qty > 0
		</if>
		group by A.S_itemCode
	</select>
	
	<select id="salesStockLotSelectDao" resultType="com.busience.material.dto.StockDto">
		SELECT 
			lmt.LM_LotNo S_LotNo, A.S_itemCode, B.Product_Item_Name S_itemName,
		    B.Product_Info_STND_1 S_Item_Standard_1, B.Product_Info_STND_2 s_Item_Standard_2,
		    C.Child_TBL_Type S_item_Classfy_1_Name, D.Child_TBL_Type S_item_Classfy_2_Name,
		    E.Child_TBL_Type S_item_Unit, dt.Child_TBL_Type S_Item_Material,
		    A.S_Qty, A.S_WareHouse
		FROM Stock_tbl A
		inner join LotMaster_tbl lmt ON A.S_ItemCode = lmt.LM_ItemCode
		inner join Product_Info_tbl B on A.S_itemCode = B.Product_Item_Code
		inner join DTL_TBL C on B.Product_Item_CLSFC_1 = C.Child_TBL_No
		inner join DTL_TBL D on B.Product_Item_CLSFC_2 = D.Child_TBL_No
		inner join DTL_TBL E on B.Product_Unit = E.Child_TBL_No
		inner join DTL_TBL dt ON B.Product_Material = dt.Child_TBL_No
		<if test="ItemCode != ''">
		where A.S_itemCode like concat('%', #{ItemCode}, '%')
		</if>
		and A.S_WareHouse = (SELECT Child_TBL_No FROM DTL_TBL where New_TBL_Code = 10 and Child_TBL_Num = 3)
		<if test="LotNo != ''">
		and lmt.LM_LotNo like concat('%',#{LotNo},'%')
		</if>
		<if test="Check == true">
			and A.S_Qty > 0
		</if>
	</select>
		
	<select id="salesOutputStockDao" resultType="com.busience.material.dto.StockDto">
		SELECT Product_Item_Code S_itemCode, Product_Item_Name S_itemName, Product_Info_STND_1 S_Item_Standard_1, Product_Info_STND_2 S_Item_Standard_2,
			dt.Child_TBL_Type S_Item_Classfy_1_Name, dt2.Child_TBL_Type S_Item_Classfy_2_Name, dt3.Child_TBL_Type S_Item_Material, st.S_Qty,
			SUM(soot.Sales_Output_Order_lNot_Stocked) S_Sales_Output_Order_Qty 
		FROM Product_Info_tbl pit
		LEFT OUTER JOIN Stock_tbl st ON pit.Product_Item_Code = st.S_ItemCode
		LEFT OUTER JOIN Sales_OrderList_tbl sot ON pit.Product_Item_Code = sot.Sales_Order_lCode AND sot.Sales_Order_lNot_Stocked > 0
		LEFT OUTER JOIN Sales_Output_OrderList_tbl soot ON pit.Product_Item_Code = soot.Sales_Output_Order_lCode
		LEFT OUTER JOIN DTL_TBL dt ON pit.Product_Item_CLSFC_1 = dt.Child_TBL_No
		LEFT OUTER JOIN DTL_TBL dt2 ON pit.Product_Item_CLSFC_2 = dt2.Child_TBL_No
		LEFT OUTER JOIN DTL_TBL dt3 ON pit.Product_Material = dt3.Child_TBL_No
		WHERE sot.Sales_Order_lCus_No = #{SalesOrderNo}
		AND st.S_Warehouse = '52'
		GROUP BY pit.Product_Item_Code
	</select>
	<select id="salesOutputOrderStockDao" resultType="com.busience.material.dto.StockDto">
		SELECT Product_Item_Code S_itemCode, Product_Item_Name S_itemName, Product_Info_STND_1 S_Item_Standard_1, Product_Info_STND_2 S_Item_Standard_2,
		dt.Child_TBL_Type S_Item_Classfy_1_Name, dt2.Child_TBL_Type S_Item_Classfy_2_Name, dt3.Child_TBL_Type S_Item_Material, st.S_Qty  
		FROM Product_Info_tbl pit 
		LEFT OUTER JOIN Stock_tbl st ON pit.Product_Item_Code = st.S_ItemCode
		LEFT OUTER JOIN DTL_TBL dt ON pit.Product_Item_CLSFC_1 = dt.Child_TBL_No
		LEFT OUTER JOIN DTL_TBL dt2 ON pit.Product_Item_CLSFC_2 = dt2.Child_TBL_No
		LEFT OUTER JOIN DTL_TBL dt3 ON pit.Product_Material = dt3.Child_TBL_No
		WHERE Product_Item_Code = #{ItemCode}
	</select>
	
	<select id="stockChangeSelectDao" resultType="com.busience.material.dto.StockDto">
		SELECT 
			 A.LM_LotNo S_LotNo, A.LM_ItemCode S_itemCode, B.Product_Item_Name S_itemName,
		    B.Product_Info_STND_1 S_Item_Standard_1, B.Product_Info_STND_2 s_Item_Standard_2,
		    C.Child_TBL_Type S_item_Classfy_1_Name, D.Child_TBL_Type S_item_Classfy_2_Name,
		    E.Child_TBL_Type S_item_Unit, G.Child_TBL_Type S_item_Material,
		    A.LM_Qty S_Qty, A.LM_Warehouse 
		FROM LotMaster_tbl A
		inner join Product_Info_tbl B on A.LM_ItemCode = B.Product_Item_Code
		inner join DTL_TBL C on B.Product_Item_CLSFC_1 = C.Child_TBL_No
		inner join DTL_TBL D on B.Product_Item_CLSFC_2 = D.Child_TBL_No
		inner join DTL_TBL E on B.Product_Unit = E.Child_TBL_No
		inner join DTL_TBL G on B.Product_Material = G.Child_TBL_No
		where A.LM_Warehouse = #{s_WareHouse}
		and A.LM_Qty > 0
		order by A.LM_ItemCode
	</select>
	<!-- 	select
			A.S_itemCode,
			D.Product_Item_Name S_itemName,
			D.Product_Info_STND_1 S_Item_Standard_1,
			A.S_Qty, 
			sum(C.Sales_Output_Order_lNot_Stocked) Sales_Output_Order_Qty
		from Stock_tbl A
		inner join Sales_OrderList_tbl B on A.S_itemCode = B.Sales_Order_lCode and B.Sales_Order_lNot_Stocked >0
		left join Sales_Output_OrderList_tbl C on A.S_itemCode = C.Sales_Output_Order_lCode
		inner join Product_Info_tbl D on A.S_itemCode = D.Product_Item_Code
		where B.Sales_Order_lCus_No = #{SalesOrderNo}
		group by A.S_itemCode -->
	<update id="stockInsertUpdateDao">
		insert into Stock_tbl(
			S_ItemCode, S_Qty,
			S_WareHouse
		) values(
			#{S_ItemCode}, #{S_Qty},
			#{S_WareHouse}
		)on duplicate key update
			S_Qty = S_Qty + #{S_Qty}
	</update>
	
	<insert id="stockInsertDao">
		insert into Stock_tbl(
			S_itemCode, S_Qty, S_WareHouse
		)values(
			#{LM_ItemCode}, #{LM_Qty}, #{LM_WareHouse}
		)on duplicate key update
		S_Qty = S_Qty + #{LM_Qty}
	</insert>
	
	<update id="stockUpdateDao">
		update Stock_tbl
		set
		S_Qty = S_Qty - #{LM_Qty}
		where S_itemCode = #{LM_ItemCode}
		and S_WareHouse = #{LT_Before}
	</update>
	
	<update id="stockReturnUpdateDao">
		update Stock_tbl
		set
		S_Qty = S_Qty + #{LM_Qty}
		where S_itemCode = #{LM_ItemCode}
		and S_WareHouse = #{LT_Before}
	</update>
</mapper>